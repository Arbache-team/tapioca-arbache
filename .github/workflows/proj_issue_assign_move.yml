name: Move issue item to Dev

on:
  issues:
    types:
      - assigned

jobs:
  track_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_SECRET }}
          ORGANIZATION: Arbache-team
          PROJECT_NUMBER: 10
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:100) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'ITEM_STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'ITEM_STATUS_OPTION_ID='$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Em desenvolvimento") | .id' project_data.json) >> $GITHUB_ENV

      - name: Get Card from issue
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_SECRET }}
          ORGANIZATION: Arbache-team
          REPO: tapioca-arbache
        run: |
          gh api graphql -f query='
          query($org: String!, $repo: String!) {
            repository(name:$repo, owner:$org) {
              issue(number: ${{ github.event.issue.number }}) {
                id
                title
                projectItems(first:1){
                  nodes{
                    id
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -f repo=$REPO > card_data.json

          echo 'ITEM_ISSUE_ID='$(jq '.data.repository.issue.projectItems.nodes[0].id' card_data.json) >> $GITHUB_ENV

      - name: Set card to dev
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_SECRET }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_option: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $status_field
                  value: {
                    singleSelectOptionId: $status_option
                  }
                }
              ){
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ISSUE_ID -f status_field=$ITEM_STATUS_FIELD_ID -f status_option=$ITEM_STATUS_OPTION_ID
